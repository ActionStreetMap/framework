Mercraft is engine for building real city/environment from OSM data.

The main goal is simulate real city which includes:
	* rendering of different models like buildings, roads, parks, rivers, etc. using OSM data for given location
	* fill environment by people, cars, animals with realistic behavior
	* add character to the scene which is capable to interact with this environment
	* game world should be limited only by OSM maps which means that game world is almost entire Earth
	* using some external services to extend environment (for example, weather, famous places, events, etc.)

It should be possible to build different 3D-games (either car simulations or GTA like games) on top this engine for mobile devices.
		
Development

	Technologies: Unity3D, C# (JavaScript is possible for Unity scripting)
	
Tips:
	Do not use Singleton pattern
	Do not use DI as Service Locator
	Follow GRASP and SOLID principles
	Use TDD approach

	
Vocabulary:
	General:
		* OSM - OpenStreetMap which provides open map data
		* Pbf - binary file format for storing OSM data
		* Way/Node/Relation - OSM primitives (http://wiki.openstreetmap.org/wiki/Elements)
		* Bounding box (bbox) - something like http://en.wikipedia.org/wiki/Minimum_bounding_box
	
	Application specific:
		* Mercraft - project name
		* Tile - contains loaded game objects (buildings, roads, etc). Has predefined in configuration size
		* MapCss - a CSS-like language for map stylesheets (http://wiki.openstreetmap.org/wiki/MapCSS. 
			App implementation uses custom syntax in some places, but the general idea is the same
			
		* DebugConsole - debugger console which is available in game. Provides the way to see log messages 
			and perform custom commands like get information about current loaded zone/tile, etc.

Useful links:	
	http://wiki.openstreetmap.org : for all OSM specific questions
		

TODO
	* Features
		* Add Roads
		* Improve Buildins
		* Add Parks/GreenZones
		* Add cars, people, etc. (requires AI and logic for putting these objects into world)

	* Performance
		* Decrease zone loading time

		
	* Infrastructure:
		* Visualize zone loading process
		* improve DebugConsole
		* refactor DebugConsole


Software architecture